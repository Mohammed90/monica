# PHP
# Test and package your PHP project.
# Add steps that run tests, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php

trigger:
  batch: 'true'
  branches:
    include:
    - master
    exclude:
    - 'l10n_master*'
  tags:
    include:
    - '*'
pr:
  autoCancel: 'true'
  branches:
    include:
    - '*'
    exclude:
    - 'l10n_master*'

variables:
  phpVersion: 7.2
  COMPOSER_HOME: $(Agent.BuildDirectory)/.composer

stages:
- stage: build
  displayName: 'Docker'
  jobs:
  - job: build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'build docker image'
      inputs:
        command: build
        containerRegistry: 'docker-artifactory'
        Dockerfile: scripts/docker/dev/Dockerfile
        buildContext: .
        repository: 'monica-dev'
        tags: $(Build.BuildId)

    - task: Docker@2
      inputs:
        command: images

    - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-docker.ArtifactoryDocker@1
      displayName: 'Artifactory docker push'
      inputs:
        artifactoryService: artifactory
        targetRepo: 'docker-local'
        imageName: '$(Jfrog.Docker)/monicahq/monica-dev:$(Build.BuildId)'
        collectBuildInfo: true

    - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-publish-build-info.ArtifactoryPublishBuildInfo@1
      displayName: 'Artifactory Publish Build Info'
      inputs:
        artifactoryService: artifactory

  - job: build_assets
    dependsOn: build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - template: .azure/docker-pull-step.yml
    - task: Docker@2
      displayName: 'Build assets'
      inputs:
        command: 'run'
        arguments: '--network="host" --name monica-dev --rm -v $(System.DefaultWorkingDirectory)/public:/var/www/monica/public $(Jfrog.Docker)/monicahq/monica-dev:$(Build.BuildId) scripts/ci/build-assets.sh'
    - bash: scripts/ci/update-assets.sh
      displayName: 'Update assets'
      env:
        GH_TOKEN: $(GH_TOKEN)
        ASSETS_USERNAME: $(ASSETS_USERNAME)
        ASSETS_EMAIL: $(ASSETS_EMAIL)
        ASSETS_GITHUB_TOKEN: $(ASSETS_GITHUB_TOKEN)

  - job: tests
    dependsOn: build
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      parallel: 4
    steps:
    - task: Docker@2
      displayName: 'Run mysql'
      inputs:
        command: 'run'
        arguments: '-d --rm -p 3307:3306 --mount type=tmpfs,destination=/var/lib/mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=TRUE -e MYSQL_ROOT_PASSWORD= --name mysql mysql:5.7'

    - template: .azure/unit-tests-select-step.yml
    - template: .azure/docker-pull-step.yml

    - bash: |
        set -v
        mysql --protocol=tcp -u root -h 127.0.0.1 -P 3307 -e "CREATE DATABASE IF NOT EXISTS monica CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
        mysql --protocol=tcp -u root -h 127.0.0.1 -P 3307 monica < scripts/database.test.sql
      displayName: 'Prepare db'
    - task: Docker@2
      displayName: 'Prepare db'
      inputs:
        command: 'run'
        arguments: '--network="host" --name monica-dev --rm $(Jfrog.Docker)/monicahq/monica-dev:$(Build.BuildId) ./scripts/ci/prepare-db.sh'
      env:
        DB_TEST_PORT: 3307

    - task: Docker@2
      displayName: 'Run tests'
      inputs:
        command: 'run'
        arguments: '--network="host" --name monica-dev --rm -v $(System.DefaultWorkingDirectory)/results:/var/www/monica/results $(Jfrog.Docker)/monicahq/monica-dev:$(Build.BuildId) ./scripts/ci/runtests.sh $(System.JobPositionInPhase) $(TESTSUITE)'
      env:
        DB_TEST_PORT: 3307

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: 'results*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/results/junit/unit'
        mergeTestResults: true
      condition: succeededOrFailed()

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'results$(System.JobPositionInPhase)'
        targetPath: 'results'

  - template: .azure/test-browser-job.yml

  - job: psalm
    dependsOn: build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: none
    - template: .azure/docker-pull-step.yml
    - task: Docker@2
      displayName: 'Run psalm'
      inputs:
        command: 'run'
        arguments: '--name monica-dev --rm $(Jfrog.Docker)/monicahq/monica-dev:$(Build.BuildId) vendor/bin/psalm --show-info=false'

  - job: phpstan
    dependsOn: build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: none
    - template: .azure/docker-pull-step.yml
    - task: Docker@2
      displayName: 'Run phpstan'
      inputs:
        command: 'run'
        arguments: '--name monica-dev --rm $(Jfrog.Docker)/monicahq/monica-dev:$(Build.BuildId) php artisan code:analyse'

  - job: clean
    dependsOn:
      - build
      - tests
      - psalm
      - phpstan
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: none
    - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-discard-builds-task.ArtifactoryDiscardBuilds@1
      displayName: 'Artifactory Discard Builds'
      inputs:
        artifactoryService: artifactory
        buildName: '$(Jfrog.Docker)/monicahq/monica-dev:$(Build.BuildId)'
        deleteArtifacts: true
#        async: true
      continueOnError: true

  - job: reporting
    dependsOn:
    - tests
    - tests_browser
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - template: .azure/prepare-environment-step.yml
    - template: .azure/composer-install-step.yml
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: 'results'
        downloadPath: $(System.DefaultWorkingDirectory)/results
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: 'results1'
        downloadPath: $(System.DefaultWorkingDirectory)/results
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: 'results2'
        downloadPath: $(System.DefaultWorkingDirectory)/results
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: 'results3'
        downloadPath: $(System.DefaultWorkingDirectory)/results
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: 'results4'
        downloadPath: $(System.DefaultWorkingDirectory)/results
    - bash: |
        yarn global add junit-merge
        $(yarn global bin)/junit-merge --recursive --dir results/junit --out results/results.xml
        ls results/results.xml
      displayName: 'Merge junit files'
    - template: .azure/runsonar-step.yml

- stage: deploy
  displayName: 'Deploy'
  dependsOn: build
  condition: in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI')
  jobs:
  - job: deployAssets
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - bash: make assets
    - bash: make push_bintray_assets
      env:
        BINTRAY_USER: $(BINTRAY_USER)
        BINTRAY_APIKEY: $(BINTRAY_APIKEY)

  - job: deploy_dist
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - template: .azure/composer-install-step.yml
      parameters:
        no_dev: 'true'
    - bash: make dist
    - bash: make push_bintray_dist
      env:
        BINTRAY_USER: $(BINTRAY_USER)
        BINTRAY_APIKEY: $(BINTRAY_APIKEY)

  - job: deploy_docker_master
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - template: .azure/prepare-environment-step.yml
    - template: .azure/docker-build-step.yml
    - template: .azure/docker-push-bintray-step.yml

  - job: deploy_docker
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - template: .azure/prepare-environment-step.yml
    - template: .azure/docker-build-step.yml
    - template: .azure/docker-push-bintray-step.yml
    - bash: |
        echo $DOCKER_LOGIN | docker login -u $DOCKER_USER --password-stdin
        make docker_tag
        make docker_push
        # notify microbadger to update
        # https://microbadger.com/images/monicahq/monicahq
        curl -X POST $MICROBADGER_WEBHOOK
      displayName: 'Publish docker image'
      env:
        MICROBADGER_WEBHOOK: $(MICROBADGER_WEBHOOK)
        DOCKER_LOGIN: $(DOCKER_LOGIN)
